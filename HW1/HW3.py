#1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

def devide(a:float, b:float) -> float:
    """
    Функция делит один полученный агрумент на другой
    :param :a, b: float
    :return: float
    """
    try:
        return a/b
    except ZeroDivisionError:
        print('Попытка деления на ноль!')

while True:
    try:
        a = float(input('Введите число а делимое: '))
        b = float(input('Введите число b делитель: '))

        print(devide(a, b))
        end = input('Хотите закончить, введите q сейчас: ')
        if end == 'q':
            break
    except ValueError:
        print('Введите число!')
        continue
#2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.

def characteristics (name:str,surname:str,year:int,city:str,e_mail:str, phone:int) -> str:
    """
    Функция принимает данные о человеке и возвращает их одной строкой.
    :param :name:str,surname:str,year:int,city:str,e_mail:str, phone:int
    :return: str
    """
    print(str(f'{name} {surname} {year} {city} {e_mail} {phone}'))

characteristics(name='Oleg', surname='Razumov', year=1983, city='Moscow', e_mail='elessar_2004@list.ru', phone=79268182815)

#3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.

def sum_max_two(q:int,w:int,r:int) -> int:
    """
    Функция принимает три числа и выводит сумму наибольших двух.
    :param :q:int,w:int,r:int
    :return: int
    """
    three_numbers = [q, w, r]
    three_numbers.remove(min(three_numbers))
    return three_numbers[0] + three_numbers[1]

print(sum_max_two(1, 5, 100))

#4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y).
# При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
#Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора *.
# Второй — более сложная реализация без оператора *, предусматривающая использование цикла.

def exponentiation(x:float, y:int) -> float:
    """
    Функция принимает 2 числа и возводит x в степень y без участия стандартных операторов.
    :param :x:float, y:int
    :return: float
    """
    x_nochange = x
    for i in range(abs(y)-1):
        x = x*x_nochange
    return x

print(exponentiation(2, -3))

#5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ,
# выполнение программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел
# к полученной ранее сумме и после этого завершить программу.

summ = 0

print('Если вы хотите завершить программу, введите q')

while True:
    string = input('Введите строку чисел, разделенных пробелами: ')
    list_of_numbers = string.split()

    for d in range(len(list_of_numbers)):
        if str(list_of_numbers[d]) != 'q':
            summ = summ + int(list_of_numbers[d])
        else:
            break

    print('Сумма чисел: ', summ)

    if str(list_of_numbers[d]) == 'q':
        break

#6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой.
# Например, print(int_func(‘text’)) -> Text.
#Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
# Необходимо использовать написанную ранее функцию int_func().

def int_func(string_low:str) -> str:

    """
    Функция принимает строку из маленьких символов и возвращает строку где каждое слово начинается с большой буквы.
    :param : string_low:str
    :return: str
    """
    return string_low.title()

print(int_func('hello how are you'))





